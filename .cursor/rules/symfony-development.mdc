---
description: 
globs: 
alwaysApply: false
---
# Symfony Development Guidelines

## Symfony 7.3 Best Practices

### Controller Conventions
- Controllers should be in [src/Controller/](mdc:src/Controller)
- Use dependency injection for services
- Keep controllers thin - delegate business logic to services
- Return proper HTTP status codes and responses
- Use annotations or attributes for routing

### Entity Development
- Entities should be in [src/Entity/](mdc:src/Entity)
- Use Doctrine ORM annotations or attributes
- Implement proper getters/setters
- Use repositories for complex queries
- Follow naming conventions: PascalCase for class names

### Repository Pattern
- Repositories should be in [src/Repository/](mdc:src/Repository)
- Extend `ServiceEntityRepository` for custom queries
- Use query builders for complex queries
- Implement custom finder methods as needed

### Service Configuration
- Main service configuration: [config/services.yaml](mdc:config/services.yaml)
- Use autowiring when possible
- Define services with proper scopes
- Use dependency injection for all dependencies

### Routing
- Main routing configuration: [config/routes.yaml](mdc:config/routes.yaml)
- Use annotations/attributes for controller routing
- Follow RESTful conventions for API endpoints
- Use named routes for better maintainability

### Templates
- Templates should be in [templates/](mdc:templates)
- Use Twig template engine
- Extend base template: [templates/base.html.twig](mdc:templates/base.html.twig)
- Follow Twig naming conventions: lowercase with underscores

### Testing
- Tests should be in [tests/](mdc:tests)
- Use PHPUnit for unit and functional tests
- Use Zenstruck Foundry for test data: [src/Story/](mdc:src/Story)
- Follow naming convention: `*Test.php` for test files

### Console Commands
- Use [bin/console](mdc:bin/console) for Symfony CLI commands
- Common commands:
  - `make:entity` - Create entities
  - `make:controller` - Create controllers
  - `make:migration` - Generate migrations
  - `doctrine:migrations:migrate` - Run migrations
  - `doctrine:fixtures:load` - Load test data

### Code Quality Tools
- PHP CS Fixer: [.php-cs-fixer.dist.php](mdc:.php-cs-fixer.dist.php)
- PHPStan: [phpstan.dist.neon](mdc:phpstan.dist.neon)
- PHP Mess Detector: [phpmd.dist.xml](mdc:phpmd.dist.xml)
- Run quality checks using Makefile commands

### Environment Configuration
- Use `.env` files for environment-specific configuration
- Never commit sensitive data to version control
- Use environment variables for database credentials
- Configure different environments: dev, test, prod

### Database Management
- Use Doctrine Migrations for schema changes
- Migrations stored in [migrations/](mdc:migrations)
- Always create migrations for entity changes
- Use fixtures for test data: [src/DataFixtures/](mdc:src/DataFixtures)

### Security Best Practices
- Validate all user input
- Use CSRF protection for forms
- Implement proper authentication/authorization
- Sanitize data before database operations
- Use prepared statements (handled by Doctrine)
