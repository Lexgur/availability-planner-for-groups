---
description: 
globs: 
alwaysApply: false
---
# Code Quality Standards

## Static Analysis Tools

### PHP CS Fixer
- Configuration: [.php-cs-fixer.dist.php](mdc:.php-cs-fixer.dist.php)
- Enforces PSR-12 coding standards
- Run with: `make php-cs-fixer`
- Automatically fixes code style issues

### PHPStan
- Configuration: [phpstan.dist.neon](mdc:phpstan.dist.neon)
- Static analysis for PHP code
- Detects potential bugs and type issues
- Run with: `make phpstan`
- Level 8 analysis enabled

### PHP Mess Detector (PHPMD)
- Configuration: [phpmd.dist.xml](mdc:phpmd.dist.xml)
- Detects code smells and complexity issues
- Analyzes: bin, config, src, tests directories
- Run with: `make phpmd`
- Uses ANSI output format

## Coding Standards

### PHP Code Style
- Follow PSR-12 coding standards
- Use 4 spaces for indentation
- Maximum line length: 120 characters
- Use strict typing: `declare(strict_types=1);`
- Use type hints for all parameters and return types

### Naming Conventions
- **Classes**: PascalCase (e.g., `UserController`)
- **Methods**: camelCase (e.g., `getUserById()`)
- **Properties**: camelCase (e.g., `$userRepository`)
- **Constants**: UPPER_SNAKE_CASE (e.g., `MAX_RETRY_ATTEMPTS`)
- **Files**: Match class names exactly

### Symfony Conventions
- **Controllers**: Suffix with `Controller` (e.g., `UserController`)
- **Entities**: No suffix (e.g., `User`)
- **Repositories**: Suffix with `Repository` (e.g., `UserRepository`)
- **Services**: Descriptive names (e.g., `UserService`)

### Database Conventions
- **Tables**: snake_case, plural (e.g., `user_profiles`)
- **Columns**: snake_case (e.g., `created_at`, `user_id`)
- **Foreign Keys**: `{table_name}_id` (e.g., `user_id`)

### Template Conventions
- **Files**: snake_case with `.html.twig` extension
- **Blocks**: snake_case (e.g., `{% block user_list %}`)
- **Variables**: camelCase in templates

## Quality Gates

### Pre-commit Checklist
- [ ] Code passes PHP CS Fixer
- [ ] No PHPStan errors
- [ ] No PHPMD violations
- [ ] All tests pass
- [ ] Code is properly documented

### Testing Requirements
- Unit tests for all services
- Functional tests for controllers
- Integration tests for repositories
- Test coverage should be >80%

### Documentation Standards
- PHPDoc blocks for all public methods
- README updates for new features
- Inline comments for complex logic
- API documentation for endpoints

## IDE Configuration
- Use `.editorconfig` for consistent formatting
- Configure IDE to use project's PHP CS Fixer rules
- Enable PHPStan integration in IDE
- Use Symfony plugin for better development experience
