---
description: 
globs: 
alwaysApply: true
---
# Pull Request Summarization Guidelines

## PR Summarization Workflow

When asked to "Summarize for PR" or similar requests, follow this exact workflow:

### 1. Branch Analysis
- Determine current branch using `git branch --show-current`
- Identify files changed against main branch using `git diff main --name-status`
- Get detailed diff statistics using `git diff main --stat`
- Review commit history with `git log main..HEAD --oneline`

### 2. Code Change Analysis
- Analyze the nature of changes (new files, modifications, deletions)
- Categorize changes by type:
  - **New Features**: New functionality added
  - **Bug Fixes**: Issues resolved
  - **Documentation**: README, comments, or documentation updates
  - **Refactoring**: Code improvements without functional changes
  - **Configuration**: Settings, environment, or tooling changes
  - **Testing**: Test files, fixtures, or test-related changes

### 3. PR Description Generation
Use the template from [.github/PULL_REQUEST_TEMPLATE.md](mdc:.github/PULL_REQUEST_TEMPLATE.md) and fill out:

#### Title Format
- Use clear, concise title describing the main change
- Follow conventional commit format when appropriate
- Keep under 72 characters when possible

#### Description Structure
- **Description**: Explain what was done and why
- **Type of change**: Check appropriate boxes
- **Testing**: Describe how changes were verified
- **Checklist**: Verify all items are completed
- **Additional context**: Provide relevant details

### 4. Output Format
Always provide the complete PR description in Markdown format:

```markdown
# [PR Title]

## Description
[Detailed explanation of changes]

## Type of change
- [x] [Relevant checkboxes]

## How Has This Been Tested?
- [x] [Test descriptions]

## Checklist:
- [x] [All checklist items]

## Screenshots (if appropriate):
[If applicable]

## Additional context:
[Any additional information]
```

### 5. Key Files to Reference
- [.github/PULL_REQUEST_TEMPLATE.md](mdc:.github/PULL_REQUEST_TEMPLATE.md) - PR template structure
- [Makefile](mdc:Makefile) - Development commands for testing
- [composer.json](mdc:composer.json) - Project dependencies and configuration
- [README.md](mdc:README.md) - Project documentation

### 6. Common Change Categories

#### Documentation Changes
- Updates to [README.md](mdc:README.md)
- New documentation files
- Code comments and inline documentation
- API documentation updates

#### Configuration Changes
- Updates to [composer.json](mdc:composer.json) or [composer.lock](mdc:composer.lock)
- Changes to [config/](mdc:config) files
- Environment configuration updates
- Docker configuration changes in [compose.yml](mdc:compose.yml)

#### Code Quality Tools
- Updates to [.php-cs-fixer.dist.php](mdc:.php-cs-fixer.dist.php)
- Changes to [phpstan.dist.neon](mdc:phpstan.dist.neon)
- Updates to [phpmd.dist.xml](mdc:phpmd.dist.xml)
- New Cursor rules in [.cursor/rules/](mdc:.cursor/rules)

#### Testing Changes
- New test files in [tests/](mdc:tests)
- Updates to [phpunit.dist.xml](mdc:phpunit.dist.xml)
- Changes to fixtures in [src/DataFixtures/](mdc:src/DataFixtures)
- Updates to stories in [src/Story/](mdc:src/Story)

### 7. Quality Assurance
Before generating PR description:
- Verify all changes are properly categorized
- Ensure testing section accurately reflects verification methods
- Confirm checklist items are appropriate for the change type
- Check that description clearly explains the business value
